/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: echo.proto
 *
 */

//  Copyright (c) 2015, Google Inc.
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import Foundation
import SwiftProtobuf


public struct Echo_EchoRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Echo_EchoRequest"}
  public var protoMessageName: String {return "EchoRequest"}
  public var protoPackageName: String {return "echo"}
  public var jsonFieldNames: [String: Int] {return [
    "text": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "text": 1,
  ]}

  public var text: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &text)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if text != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: text, protoFieldNumber: 1, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
    }
  }

  public func _protoc_generated_isEqualTo(other: Echo_EchoRequest) -> Bool {
    if text != other.text {return false}
    return true
  }
}

public struct Echo_EchoResponse: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Echo_EchoResponse"}
  public var protoMessageName: String {return "EchoResponse"}
  public var protoPackageName: String {return "echo"}
  public var jsonFieldNames: [String: Int] {return [
    "text": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "text": 1,
  ]}

  public var text: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &text)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if text != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: text, protoFieldNumber: 1, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
    }
  }

  public func _protoc_generated_isEqualTo(other: Echo_EchoResponse) -> Bool {
    if text != other.text {return false}
    return true
  }
}
