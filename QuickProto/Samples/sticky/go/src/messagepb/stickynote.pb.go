// Code generated by protoc-gen-go.
// source: go/src/messagepb/stickynote.proto
// DO NOT EDIT!

/*
Package messagepb is a generated protocol buffer package.

It is generated from these files:
	go/src/messagepb/stickynote.proto

It has these top-level messages:
	StickyNoteRequest
	StickyNoteResponse
*/
package messagepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StickyNoteRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *StickyNoteRequest) Reset()                    { *m = StickyNoteRequest{} }
func (m *StickyNoteRequest) String() string            { return proto.CompactTextString(m) }
func (*StickyNoteRequest) ProtoMessage()               {}
func (*StickyNoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StickyNoteResponse struct {
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *StickyNoteResponse) Reset()                    { *m = StickyNoteResponse{} }
func (m *StickyNoteResponse) String() string            { return proto.CompactTextString(m) }
func (*StickyNoteResponse) ProtoMessage()               {}
func (*StickyNoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*StickyNoteRequest)(nil), "messagepb.StickyNoteRequest")
	proto.RegisterType((*StickyNoteResponse)(nil), "messagepb.StickyNoteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StickyNote service

type StickyNoteClient interface {
	Get(ctx context.Context, in *StickyNoteRequest, opts ...grpc.CallOption) (*StickyNoteResponse, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (StickyNote_UpdateClient, error)
}

type stickyNoteClient struct {
	cc *grpc.ClientConn
}

func NewStickyNoteClient(cc *grpc.ClientConn) StickyNoteClient {
	return &stickyNoteClient{cc}
}

func (c *stickyNoteClient) Get(ctx context.Context, in *StickyNoteRequest, opts ...grpc.CallOption) (*StickyNoteResponse, error) {
	out := new(StickyNoteResponse)
	err := grpc.Invoke(ctx, "/messagepb.StickyNote/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickyNoteClient) Update(ctx context.Context, opts ...grpc.CallOption) (StickyNote_UpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StickyNote_serviceDesc.Streams[0], c.cc, "/messagepb.StickyNote/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &stickyNoteUpdateClient{stream}
	return x, nil
}

type StickyNote_UpdateClient interface {
	Send(*StickyNoteRequest) error
	Recv() (*StickyNoteResponse, error)
	grpc.ClientStream
}

type stickyNoteUpdateClient struct {
	grpc.ClientStream
}

func (x *stickyNoteUpdateClient) Send(m *StickyNoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stickyNoteUpdateClient) Recv() (*StickyNoteResponse, error) {
	m := new(StickyNoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StickyNote service

type StickyNoteServer interface {
	Get(context.Context, *StickyNoteRequest) (*StickyNoteResponse, error)
	Update(StickyNote_UpdateServer) error
}

func RegisterStickyNoteServer(s *grpc.Server, srv StickyNoteServer) {
	s.RegisterService(&_StickyNote_serviceDesc, srv)
}

func _StickyNote_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StickyNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickyNoteServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagepb.StickyNote/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickyNoteServer).Get(ctx, req.(*StickyNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickyNote_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StickyNoteServer).Update(&stickyNoteUpdateServer{stream})
}

type StickyNote_UpdateServer interface {
	Send(*StickyNoteResponse) error
	Recv() (*StickyNoteRequest, error)
	grpc.ServerStream
}

type stickyNoteUpdateServer struct {
	grpc.ServerStream
}

func (x *stickyNoteUpdateServer) Send(m *StickyNoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stickyNoteUpdateServer) Recv() (*StickyNoteRequest, error) {
	m := new(StickyNoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StickyNote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messagepb.StickyNote",
	HandlerType: (*StickyNoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _StickyNote_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _StickyNote_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("go/src/messagepb/stickynote.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xcf, 0xd7, 0x2f,
	0x2e, 0x4a, 0xd6, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x2d, 0x48, 0xd2, 0x2f, 0x2e, 0xc9,
	0x4c, 0xce, 0xae, 0xcc, 0xcb, 0x2f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84,
	0xcb, 0x29, 0xe9, 0x72, 0x09, 0x06, 0x83, 0xa5, 0xfd, 0x80, 0xd2, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0x50, 0x15, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30,
	0xae, 0x92, 0x16, 0x97, 0x10, 0xb2, 0xf2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e,
	0xd6, 0xcc, 0x5c, 0x98, 0x6a, 0x9e, 0x20, 0x08, 0xc7, 0x68, 0x3e, 0x23, 0x17, 0x17, 0x42, 0xb1,
	0x90, 0x0b, 0x17, 0xb3, 0x7b, 0x6a, 0x89, 0x90, 0x8c, 0x1e, 0xdc, 0x72, 0x3d, 0x0c, 0x9b, 0xa5,
	0x64, 0x71, 0xc8, 0x42, 0x2c, 0x52, 0x62, 0x10, 0xf2, 0xe6, 0x62, 0x0b, 0x2d, 0x48, 0x49, 0x04,
	0x9a, 0x47, 0x99, 0x41, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0xe0, 0x30, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0x2b, 0x46, 0x00, 0x33, 0x01, 0x00, 0x00,
}
